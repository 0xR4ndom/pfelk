{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Unbound - Top 10 URL-Name","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Unbound - Top 10 URL-Name\",\"type\":\"tagcloud\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"significant_terms\",\"params\":{\"field\":\"unbound.dns.question.name\",\"size\":10},\"schema\":\"segment\"}],\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true}}"},"id":"3d0ae6b0-10e2-11eb-8725-ed0ed9b0ff36","migrationVersion":{"visualization":"7.8.0"},"references":[{"id":"unbound","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2020-10-18T01:35:43.771Z","version":"WzY0OTUsM10="}
{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Unbound - Selector","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Unbound - Selector\",\"type\":\"input_control_vis\",\"aggs\":[],\"params\":{\"controls\":[{\"id\":\"1602985008763\",\"fieldName\":\"observer.name\",\"parent\":\"\",\"label\":\"\",\"type\":\"list\",\"options\":{\"type\":\"terms\",\"multiselect\":true,\"dynamicOptions\":true,\"size\":5,\"order\":\"desc\"},\"indexPatternRefName\":\"control_0_index_pattern\"}],\"updateFiltersOnChange\":false,\"useTimeFilter\":false,\"pinFilters\":false}}"},"id":"bc12bcd0-10e2-11eb-8725-ed0ed9b0ff36","migrationVersion":{"visualization":"7.8.0"},"references":[{"id":"unbound","name":"control_0_index_pattern","type":"index-pattern"}],"type":"visualization","updated_at":"2020-10-18T01:39:16.893Z","version":"WzY1MDYsM10="}
{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Unbound - Top 10 IP-Name","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Unbound - Top 10 IP-Name\",\"type\":\"tagcloud\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"unbound.client.ip\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":10,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"segment\"}],\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":18,\"maxFontSize\":72,\"showLabel\":true}}"},"id":"58560da0-10e2-11eb-8725-ed0ed9b0ff36","migrationVersion":{"visualization":"7.8.0"},"references":[{"id":"unbound","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2020-10-18T01:36:29.562Z","version":"WzY0OTksM10="}
{"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Unbound - DNS Flow","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Unbound - DNS Flow\",\"type\":\"vega\",\"aggs\":[],\"params\":{\"spec\":\"{\\n  $schema: https://vega.github.io/schema/vega/v3.0.json\\n  data: [\\n    {\\n      // query ES based on the currently selected time range and filter string\\n      name: rawData\\n      url: {\\n        %context%: true\\n        %timefield%: @timestamp\\n        index: pfelk-unbound*\\n        body: {\\n          size: 0\\n          aggs: {\\n            table: {\\n              composite: {\\n                size: 10000\\n                sources: [\\n                  {\\n                    stk1: {\\n                      terms: {field: \\\"unbound.client.ip\\\"}\\n                    }\\n                  }\\n                  {\\n                    stk2: {\\n                      terms: {field: \\\"unbound.dns.question.name\\\"}\\n                    }\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        }\\n      }\\n      // From the result, take just the data we are interested in\\n      format: {property: \\\"aggregations.table.buckets\\\"}\\n      // Convert key.stk1 -> stk1 for simpler access below\\n      transform: [\\n        {type: \\\"formula\\\", expr: \\\"datum.key.stk1\\\", as: \\\"stk1\\\"}\\n        {type: \\\"formula\\\", expr: \\\"datum.key.stk2\\\", as: \\\"stk2\\\"}\\n        {type: \\\"formula\\\", expr: \\\"datum.doc_count\\\", as: \\\"size\\\"}\\n      ]\\n    }\\n    {\\n      name: nodes\\n      source: rawData\\n      transform: [\\n        // when a country is selected, filter out unrelated data\\n        {\\n          type: filter\\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\\n        }\\n        // Set new key for later lookups - identifies each node\\n        {type: \\\"formula\\\", expr: \\\"datum.stk1+datum.stk2\\\", as: \\\"key\\\"}\\n        // instead of each table row, create two new rows,\\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\\n        {\\n          type: fold\\n          fields: [\\\"stk1\\\", \\\"stk2\\\"]\\n          as: [\\\"stack\\\", \\\"grpId\\\"]\\n        }\\n        // Create a sortkey, different for stk1 and stk2 stacks.\\n        // Space separator ensures proper sort order in some corner cases.\\n        {\\n          type: formula\\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\\n          as: sortField\\n        }\\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\\n        // independently for each stack, and ensuring they are in the proper order,\\n        // alphabetical from the top (reversed on the y axis)\\n        {\\n          type: stack\\n          groupby: [\\\"stack\\\"]\\n          sort: {field: \\\"sortField\\\", order: \\\"descending\\\"}\\n          field: size\\n        }\\n        // calculate vertical center point for each node, used to draw edges\\n        {type: \\\"formula\\\", expr: \\\"(datum.y0+datum.y1)/2\\\", as: \\\"yc\\\"}\\n      ]\\n    }\\n    {\\n      name: groups\\n      source: nodes\\n      transform: [\\n        // combine all nodes into country groups, summing up the doc counts\\n        {\\n          type: aggregate\\n          groupby: [\\\"stack\\\", \\\"grpId\\\"]\\n          fields: [\\\"size\\\"]\\n          ops: [\\\"sum\\\"]\\n          as: [\\\"total\\\"]\\n        }\\n        // re-calculate the stacking y0,y1 values\\n        {\\n          type: stack\\n          groupby: [\\\"stack\\\"]\\n          sort: {field: \\\"grpId\\\", order: \\\"descending\\\"}\\n          field: total\\n        }\\n        // project y0 and y1 values to screen coordinates\\n        // doing it once here instead of doing it several times in marks\\n        {type: \\\"formula\\\", expr: \\\"scale('y', datum.y0)\\\", as: \\\"scaledY0\\\"}\\n        {type: \\\"formula\\\", expr: \\\"scale('y', datum.y1)\\\", as: \\\"scaledY1\\\"}\\n        // boolean flag if the label should be on the right of the stack\\n        {type: \\\"formula\\\", expr: \\\"datum.stack == 'stk1'\\\", as: \\\"rightLabel\\\"}\\n        // Calculate traffic percentage for this country using \\\"y\\\" scale\\n        // domain upper bound, which represents the total traffic\\n        {\\n          type: formula\\n          expr: datum.total/domain('y')[1]\\n          as: percentage\\n        }\\n      ]\\n    }\\n    {\\n      // This is a temp lookup table with all the 'stk2' stack nodes\\n      name: destinationNodes\\n      source: nodes\\n      transform: [\\n        {type: \\\"filter\\\", expr: \\\"datum.stack == 'stk2'\\\"}\\n      ]\\n    }\\n    {\\n      name: edges\\n      source: nodes\\n      transform: [\\n        // we only want nodes from the left stack\\n        {type: \\\"filter\\\", expr: \\\"datum.stack == 'stk1'\\\"}\\n        // find corresponding node from the right stack, keep it as \\\"target\\\"\\n        {\\n          type: lookup\\n          from: destinationNodes\\n          key: key\\n          fields: [\\\"key\\\"]\\n          as: [\\\"target\\\"]\\n        }\\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\\n        {\\n          type: linkpath\\n          orient: horizontal\\n          shape: diagonal\\n          sourceY: {expr: \\\"scale('y', datum.yc)\\\"}\\n          sourceX: {expr: \\\"scale('x', 'stk1') + bandwidth('x')\\\"}\\n          targetY: {expr: \\\"scale('y', datum.target.yc)\\\"}\\n          targetX: {expr: \\\"scale('x', 'stk2')\\\"}\\n        }\\n        // A little trick to calculate the thickness of the line.\\n        // The value needs to be the same as the hight of the node, but scaling\\n        // size to screen's height gives inversed value because screen's Y\\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\\n        // is at the bottom. So subtracting scaled doc count from screen height\\n        // (which is the \\\"lower\\\" bound of the \\\"y\\\" scale) gives us the right value\\n        {\\n          type: formula\\n          expr: range('y')[0]-scale('y', datum.size)\\n          as: strokeWidth\\n        }\\n        // Tooltip needs individual link's percentage of all traffic\\n        {\\n          type: formula\\n          expr: datum.size/domain('y')[1]\\n          as: percentage\\n        }\\n      ]\\n    }\\n  ]\\n  scales: [\\n    {\\n      // calculates horizontal stack positioning\\n      name: x\\n      type: band\\n      range: width\\n      domain: [\\\"stk1\\\", \\\"stk2\\\"]\\n      paddingOuter: 0.05\\n      paddingInner: 0.95\\n    }\\n    {\\n      // this scale goes up as high as the highest y1 value of all nodes\\n      name: y\\n      type: linear\\n      range: height\\n      domain: {data: \\\"nodes\\\", field: \\\"y1\\\"}\\n    }\\n    {\\n      // use rawData to ensure the colors stay the same when clicking.\\n      name: color\\n      type: ordinal\\n      range: category\\n      domain: {data: \\\"rawData\\\", fields: [\\\"stk1\\\", \\\"stk2\\\"]}\\n    }\\n    {\\n      // this scale is used to map internal ids (stk1, stk2) to stack names\\n      name: stackNames\\n      type: ordinal\\n      range: [\\\"Source\\\", \\\"Destination\\\"]\\n      domain: [\\\"stk1\\\", \\\"stk2\\\"]\\n    }\\n  ]\\n  axes: [\\n    {\\n      // x axis should use custom label formatting to print proper stack names\\n      orient: bottom\\n      scale: x\\n      encode: {\\n        labels: {\\n          update: {\\n            text: {scale: \\\"stackNames\\\", field: \\\"value\\\"}\\n          }\\n        }\\n      }\\n    }\\n    {orient: \\\"left\\\", scale: \\\"y\\\"}\\n  ]\\n  marks: [\\n    {\\n      // draw the connecting line between stacks\\n      type: path\\n      name: edgeMark\\n      from: {data: \\\"edges\\\"}\\n      // this prevents some autosizing issues with large strokeWidth for paths\\n      clip: true\\n      encode: {\\n        update: {\\n          // By default use color of the left node, except when showing traffic\\n          // from just one country, in which case use destination color.\\n          stroke: [\\n            {\\n              test: groupSelector && groupSelector.stack=='stk1'\\n              scale: color\\n              field: stk2\\n            }\\n            {scale: \\\"color\\\", field: \\\"stk1\\\"}\\n          ]\\n          strokeWidth: {field: \\\"strokeWidth\\\"}\\n          path: {field: \\\"path\\\"}\\n          // when showing all traffic, and hovering over a country,\\n          // highlight the traffic from that country.\\n          strokeOpacity: {\\n            signal: !groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\\n          }\\n          // Ensure that the hover-selected edges show on top\\n          zindex: {\\n            signal: !groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\\n          }\\n          // format tooltip string\\n          tooltip: {\\n            signal: datum.stk1 + ' → ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\\n          }\\n        }\\n        // Simple mouseover highlighting of a single line\\n        hover: {\\n          strokeOpacity: {value: 1}\\n        }\\n      }\\n    }\\n    {\\n      // draw stack groups (countries)\\n      type: rect\\n      name: groupMark\\n      from: {data: \\\"groups\\\"}\\n      encode: {\\n        enter: {\\n          fill: {scale: \\\"color\\\", field: \\\"grpId\\\"}\\n          width: {scale: \\\"x\\\", band: 1}\\n        }\\n        update: {\\n          x: {scale: \\\"x\\\", field: \\\"stack\\\"}\\n          y: {field: \\\"scaledY0\\\"}\\n          y2: {field: \\\"scaledY1\\\"}\\n          fillOpacity: {value: 0.6}\\n          tooltip: {\\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\\n          }\\n        }\\n        hover: {\\n          fillOpacity: {value: 1}\\n        }\\n      }\\n    }\\n    {\\n      // draw country code labels on the inner side of the stack\\n      type: text\\n      from: {data: \\\"groups\\\"}\\n      // don't process events for the labels - otherwise line mouseover is unclean\\n      interactive: false\\n      encode: {\\n        update: {\\n          // depending on which stack it is, position x with some padding\\n          x: {\\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\\n          }\\n          // middle of the group\\n          yc: {signal: \\\"(datum.scaledY0 + datum.scaledY1)/2\\\"}\\n          align: {signal: \\\"datum.rightLabel ? 'left' : 'right'\\\"}\\n          baseline: {value: \\\"middle\\\"}\\n          fontWeight: {value: \\\"bold\\\"}\\n          // only show text label if the group's height is large enough\\n          text: {signal: \\\"abs(datum.scaledY0-datum.scaledY1) > 13 ? datum.grpId : ''\\\"}\\n        }\\n      }\\n    }\\n    {\\n      // Create a \\\"show all\\\" button. Shown only when a country is selected.\\n      type: group\\n      data: [\\n        // We need to make the button show only when groupSelector signal is true.\\n        // Each mark is drawn as many times as there are elements in the backing data.\\n        // Which means that if values list is empty, it will not be drawn.\\n        // Here I create a data source with one empty object, and filter that list\\n        // based on the signal value. This can only be done in a group.\\n        {\\n          name: dataForShowAll\\n          values: [{}]\\n          transform: [{type: \\\"filter\\\", expr: \\\"groupSelector\\\"}]\\n        }\\n      ]\\n      // Set button size and positioning\\n      encode: {\\n        enter: {\\n          xc: {signal: \\\"width/2\\\"}\\n          y: {value: 30}\\n          width: {value: 80}\\n          height: {value: 30}\\n        }\\n      }\\n      marks: [\\n        {\\n          // This group is shown as a button with rounded corners.\\n          type: group\\n          // mark name allows signal capturing\\n          name: groupReset\\n          // Only shows button if dataForShowAll has values.\\n          from: {data: \\\"dataForShowAll\\\"}\\n          encode: {\\n            enter: {\\n              cornerRadius: {value: 6}\\n              fill: {value: \\\"#f5f5f5\\\"}\\n              stroke: {value: \\\"#c1c1c1\\\"}\\n              strokeWidth: {value: 2}\\n              // use parent group's size\\n              height: {\\n                field: {group: \\\"height\\\"}\\n              }\\n              width: {\\n                field: {group: \\\"width\\\"}\\n              }\\n            }\\n            update: {\\n              // groups are transparent by default\\n              opacity: {value: 1}\\n            }\\n            hover: {\\n              opacity: {value: 0.7}\\n            }\\n          }\\n          marks: [\\n            {\\n              type: text\\n              // if true, it will prevent clicking on the button when over text.\\n              interactive: false\\n              encode: {\\n                enter: {\\n                  // center text in the paren group\\n                  xc: {\\n                    field: {group: \\\"width\\\"}\\n                    mult: 0.5\\n                  }\\n                  yc: {\\n                    field: {group: \\\"height\\\"}\\n                    mult: 0.5\\n                    offset: 2\\n                  }\\n                  align: {value: \\\"center\\\"}\\n                  baseline: {value: \\\"middle\\\"}\\n                  fontWeight: {value: \\\"bold\\\"}\\n                  text: {value: \\\"Show All\\\"}\\n                }\\n              }\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n  signals: [\\n    {\\n      // used to highlight traffic to/from the same country\\n      name: groupHover\\n      value: {}\\n      on: [\\n        {\\n          events: @groupMark:mouseover\\n          update: \\\"{stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\\\"\\n        }\\n        {events: \\\"mouseout\\\", update: \\\"{}\\\"}\\n      ]\\n    }\\n    // used to filter only the data related to the selected country\\n    {\\n      name: groupSelector\\n      value: false\\n      on: [\\n        {\\n          // Clicking groupMark sets this signal to the filter values\\n          events: @groupMark:click!\\n          update: \\\"{stack:datum.stack, stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\\\"\\n        }\\n        {\\n          // Clicking \\\"show all\\\" button, or double-clicking anywhere resets it\\n          events: [\\n            {type: \\\"click\\\", markname: \\\"groupReset\\\"}\\n            {type: \\\"dblclick\\\"}\\n          ]\\n          update: \\\"false\\\"\\n        }\\n      ]\\n    }\\n  ]\\n}\"}}"},"id":"8a0e5a80-10df-11eb-8725-ed0ed9b0ff36","migrationVersion":{"visualization":"7.8.0"},"references":[],"type":"visualization","updated_at":"2020-10-18T01:16:24.488Z","version":"WzYxNDcsM10="}
{"attributes":{"description":"","expression":"kibana\n| kibana_context  query=\"{\\\"query\\\":\\\"\\\",\\\"language\\\":\\\"kuery\\\"}\" filters=\"[]\"\n| lens_merge_tables layerIds=\"23a2d5e9-f830-47b8-8d16-e16a69a6e6e7\" \n  tables={esaggs index=\"unbound\" metricsAtAllLevels=true partialRows=true includeFormatHints=true  aggConfigs=\"[{\\\"id\\\":\\\"e37ed051-dee1-41cd-82eb-ef0ab125034b\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"terms\\\",\\\"schema\\\":\\\"segment\\\",\\\"params\\\":{\\\"field\\\":\\\"unbound.dns.question.name\\\",\\\"orderBy\\\":\\\"1893f31b-21cb-4de3-acfc-1cee702d81cb\\\",\\\"order\\\":\\\"desc\\\",\\\"size\\\":10,\\\"otherBucket\\\":false,\\\"otherBucketLabel\\\":\\\"Other\\\",\\\"missingBucket\\\":false,\\\"missingBucketLabel\\\":\\\"Missing\\\"}},{\\\"id\\\":\\\"1893f31b-21cb-4de3-acfc-1cee702d81cb\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"count\\\",\\\"schema\\\":\\\"metric\\\",\\\"params\\\":{}}]\" | lens_rename_columns idMap=\"{\\\"col-0-e37ed051-dee1-41cd-82eb-ef0ab125034b\\\":{\\\"label\\\":\\\"Top values of unbound.dns.question.name\\\",\\\"dataType\\\":\\\"string\\\",\\\"operationType\\\":\\\"terms\\\",\\\"scale\\\":\\\"ordinal\\\",\\\"sourceField\\\":\\\"unbound.dns.question.name\\\",\\\"isBucketed\\\":true,\\\"params\\\":{\\\"size\\\":10,\\\"orderBy\\\":{\\\"type\\\":\\\"column\\\",\\\"columnId\\\":\\\"1893f31b-21cb-4de3-acfc-1cee702d81cb\\\"},\\\"orderDirection\\\":\\\"desc\\\"},\\\"id\\\":\\\"e37ed051-dee1-41cd-82eb-ef0ab125034b\\\"},\\\"col-1-1893f31b-21cb-4de3-acfc-1cee702d81cb\\\":{\\\"label\\\":\\\"Count of records\\\",\\\"dataType\\\":\\\"number\\\",\\\"operationType\\\":\\\"count\\\",\\\"isBucketed\\\":false,\\\"scale\\\":\\\"ratio\\\",\\\"sourceField\\\":\\\"Records\\\",\\\"id\\\":\\\"1893f31b-21cb-4de3-acfc-1cee702d81cb\\\"}}\"}\n| lens_pie shape=\"treemap\" hideLabels=false groups=\"e37ed051-dee1-41cd-82eb-ef0ab125034b\" metric=\"1893f31b-21cb-4de3-acfc-1cee702d81cb\" numberDisplay=\"percent\" categoryDisplay=\"default\" legendDisplay=\"default\" percentDecimals=0 nestedLegend=true","state":{"datasourceMetaData":{"filterableIndexPatterns":[{"id":"unbound","title":"pfelk-unbound*"}]},"datasourceStates":{"indexpattern":{"currentIndexPatternId":"unbound","layers":{"23a2d5e9-f830-47b8-8d16-e16a69a6e6e7":{"columnOrder":["e37ed051-dee1-41cd-82eb-ef0ab125034b","1893f31b-21cb-4de3-acfc-1cee702d81cb"],"columns":{"1893f31b-21cb-4de3-acfc-1cee702d81cb":{"dataType":"number","isBucketed":false,"label":"Count of records","operationType":"count","scale":"ratio","sourceField":"Records"},"e37ed051-dee1-41cd-82eb-ef0ab125034b":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.question.name","operationType":"terms","params":{"orderBy":{"columnId":"1893f31b-21cb-4de3-acfc-1cee702d81cb","type":"column"},"orderDirection":"desc","size":10},"scale":"ordinal","sourceField":"unbound.dns.question.name"}},"indexPatternId":"unbound"}}}},"filters":[],"query":{"language":"kuery","query":""},"visualization":{"layers":[{"categoryDisplay":"default","groups":["e37ed051-dee1-41cd-82eb-ef0ab125034b"],"layerId":"23a2d5e9-f830-47b8-8d16-e16a69a6e6e7","legendDisplay":"default","metric":"1893f31b-21cb-4de3-acfc-1cee702d81cb","nestedLegend":true,"numberDisplay":"percent","percentDecimals":0}],"shape":"treemap"}},"title":"Unbound - Top Ten Queries","visualizationType":"lnsPie"},"id":"6a435b50-10e0-11eb-8725-ed0ed9b0ff36","migrationVersion":{"lens":"7.8.0"},"references":[],"type":"lens","updated_at":"2020-10-18T01:22:40.644Z","version":"WzYyNTUsM10="}
{"attributes":{"columns":["unbound.log.level","unbound.client.ip","unbound.dns.question.class","unbound.dns.answers.type","unbound.dns.question.name","unbound.process.thread.id"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[],"title":"Unbound - Log","version":1},"id":"8109a0f0-10e1-11eb-8725-ed0ed9b0ff36","migrationVersion":{"search":"7.4.0"},"references":[{"id":"unbound","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2020-10-18T01:30:28.351Z","version":"WzY0NzQsM10="}
{"attributes":{"description":"","expression":"kibana\n| kibana_context  query=\"{\\\"query\\\":\\\"\\\",\\\"language\\\":\\\"kuery\\\"}\" filters=\"[]\"\n| lens_merge_tables layerIds=\"2ac894ce-bcf8-4c73-b6f2-822b42e2710f\" \n  tables={esaggs index=\"unbound\" metricsAtAllLevels=true partialRows=true includeFormatHints=true  aggConfigs=\"[{\\\"id\\\":\\\"02f43543-0e7c-4985-ad03-60c9ffcf3f7d\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"terms\\\",\\\"schema\\\":\\\"segment\\\",\\\"params\\\":{\\\"field\\\":\\\"unbound.dns.question.class\\\",\\\"orderBy\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\",\\\"order\\\":\\\"desc\\\",\\\"size\\\":5,\\\"otherBucket\\\":false,\\\"otherBucketLabel\\\":\\\"Other\\\",\\\"missingBucket\\\":false,\\\"missingBucketLabel\\\":\\\"Missing\\\"}},{\\\"id\\\":\\\"e0e71030-7800-4826-a0fe-0308b3c032c7\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"terms\\\",\\\"schema\\\":\\\"segment\\\",\\\"params\\\":{\\\"field\\\":\\\"unbound.dns.answers.type\\\",\\\"orderBy\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\",\\\"order\\\":\\\"desc\\\",\\\"size\\\":3,\\\"otherBucket\\\":false,\\\"otherBucketLabel\\\":\\\"Other\\\",\\\"missingBucket\\\":false,\\\"missingBucketLabel\\\":\\\"Missing\\\"}},{\\\"id\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"count\\\",\\\"schema\\\":\\\"metric\\\",\\\"params\\\":{}}]\" | lens_rename_columns idMap=\"{\\\"col-0-02f43543-0e7c-4985-ad03-60c9ffcf3f7d\\\":{\\\"label\\\":\\\"Top values of unbound.dns.question.class\\\",\\\"dataType\\\":\\\"string\\\",\\\"operationType\\\":\\\"terms\\\",\\\"scale\\\":\\\"ordinal\\\",\\\"sourceField\\\":\\\"unbound.dns.question.class\\\",\\\"isBucketed\\\":true,\\\"params\\\":{\\\"size\\\":5,\\\"orderBy\\\":{\\\"type\\\":\\\"column\\\",\\\"columnId\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\"},\\\"orderDirection\\\":\\\"desc\\\"},\\\"id\\\":\\\"02f43543-0e7c-4985-ad03-60c9ffcf3f7d\\\"},\\\"col-2-e0e71030-7800-4826-a0fe-0308b3c032c7\\\":{\\\"label\\\":\\\"Top values of unbound.dns.answers.type\\\",\\\"dataType\\\":\\\"string\\\",\\\"operationType\\\":\\\"terms\\\",\\\"scale\\\":\\\"ordinal\\\",\\\"sourceField\\\":\\\"unbound.dns.answers.type\\\",\\\"isBucketed\\\":true,\\\"params\\\":{\\\"size\\\":3,\\\"orderBy\\\":{\\\"type\\\":\\\"column\\\",\\\"columnId\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\"},\\\"orderDirection\\\":\\\"desc\\\"},\\\"id\\\":\\\"e0e71030-7800-4826-a0fe-0308b3c032c7\\\"},\\\"col-3-be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\":{\\\"label\\\":\\\"Count of records\\\",\\\"dataType\\\":\\\"number\\\",\\\"operationType\\\":\\\"count\\\",\\\"isBucketed\\\":false,\\\"scale\\\":\\\"ratio\\\",\\\"sourceField\\\":\\\"Records\\\",\\\"id\\\":\\\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\\\"}}\"}\n| lens_pie shape=\"pie\" hideLabels=false groups=\"02f43543-0e7c-4985-ad03-60c9ffcf3f7d\"\n  groups=\"e0e71030-7800-4826-a0fe-0308b3c032c7\" metric=\"be23c0b8-e3a4-4076-97d6-801cbf24f2f5\" numberDisplay=\"percent\" categoryDisplay=\"default\" legendDisplay=\"default\" percentDecimals=0 nestedLegend=true","state":{"datasourceMetaData":{"filterableIndexPatterns":[{"id":"unbound","title":"pfelk-unbound*"}]},"datasourceStates":{"indexpattern":{"currentIndexPatternId":"unbound","layers":{"2ac894ce-bcf8-4c73-b6f2-822b42e2710f":{"columnOrder":["02f43543-0e7c-4985-ad03-60c9ffcf3f7d","e0e71030-7800-4826-a0fe-0308b3c032c7","be23c0b8-e3a4-4076-97d6-801cbf24f2f5"],"columns":{"02f43543-0e7c-4985-ad03-60c9ffcf3f7d":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.question.class","operationType":"terms","params":{"orderBy":{"columnId":"be23c0b8-e3a4-4076-97d6-801cbf24f2f5","type":"column"},"orderDirection":"desc","size":5},"scale":"ordinal","sourceField":"unbound.dns.question.class"},"be23c0b8-e3a4-4076-97d6-801cbf24f2f5":{"dataType":"number","isBucketed":false,"label":"Count of records","operationType":"count","scale":"ratio","sourceField":"Records"},"e0e71030-7800-4826-a0fe-0308b3c032c7":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.answers.type","operationType":"terms","params":{"orderBy":{"columnId":"be23c0b8-e3a4-4076-97d6-801cbf24f2f5","type":"column"},"orderDirection":"desc","size":3},"scale":"ordinal","sourceField":"unbound.dns.answers.type"}},"indexPatternId":"unbound"}}}},"filters":[],"query":{"language":"kuery","query":""},"visualization":{"layers":[{"categoryDisplay":"default","groups":["02f43543-0e7c-4985-ad03-60c9ffcf3f7d","e0e71030-7800-4826-a0fe-0308b3c032c7"],"layerId":"2ac894ce-bcf8-4c73-b6f2-822b42e2710f","legendDisplay":"default","metric":"be23c0b8-e3a4-4076-97d6-801cbf24f2f5","nestedLegend":true,"numberDisplay":"percent","percentDecimals":0}],"shape":"pie"}},"title":"Unbound - Q&A","visualizationType":"lnsPie"},"id":"4b2034e0-10e1-11eb-8725-ed0ed9b0ff36","migrationVersion":{"lens":"7.8.0"},"references":[],"type":"lens","updated_at":"2020-10-18T01:28:57.902Z","version":"WzY0NTIsM10="}
{"attributes":{"description":"","expression":"kibana\n| kibana_context  query=\"{\\\"query\\\":\\\"\\\",\\\"language\\\":\\\"kuery\\\"}\" filters=\"[]\"\n| lens_merge_tables layerIds=\"2ac894ce-bcf8-4c73-b6f2-822b42e2710f\" \n  tables={esaggs index=\"unbound\" metricsAtAllLevels=true partialRows=true includeFormatHints=true timeFields=\"@timestamp\" aggConfigs=\"[{\\\"id\\\":\\\"f293234a-b397-4c3a-894b-b88cb8de3c63\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"terms\\\",\\\"schema\\\":\\\"segment\\\",\\\"params\\\":{\\\"field\\\":\\\"unbound.dns.question.name\\\",\\\"orderBy\\\":\\\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\",\\\"order\\\":\\\"desc\\\",\\\"size\\\":10,\\\"otherBucket\\\":false,\\\"otherBucketLabel\\\":\\\"Other\\\",\\\"missingBucket\\\":false,\\\"missingBucketLabel\\\":\\\"Missing\\\"}},{\\\"id\\\":\\\"7c0b410a-e205-49cc-889d-a9bfe37a3c97\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"date_histogram\\\",\\\"schema\\\":\\\"segment\\\",\\\"params\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"useNormalizedEsInterval\\\":true,\\\"interval\\\":\\\"auto\\\",\\\"drop_partials\\\":false,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{}}},{\\\"id\\\":\\\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\",\\\"enabled\\\":true,\\\"type\\\":\\\"count\\\",\\\"schema\\\":\\\"metric\\\",\\\"params\\\":{}}]\" | lens_rename_columns idMap=\"{\\\"col-0-f293234a-b397-4c3a-894b-b88cb8de3c63\\\":{\\\"label\\\":\\\"Top values of unbound.dns.question.name\\\",\\\"dataType\\\":\\\"string\\\",\\\"operationType\\\":\\\"terms\\\",\\\"scale\\\":\\\"ordinal\\\",\\\"sourceField\\\":\\\"unbound.dns.question.name\\\",\\\"isBucketed\\\":true,\\\"params\\\":{\\\"size\\\":10,\\\"orderBy\\\":{\\\"type\\\":\\\"column\\\",\\\"columnId\\\":\\\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\"},\\\"orderDirection\\\":\\\"desc\\\"},\\\"id\\\":\\\"f293234a-b397-4c3a-894b-b88cb8de3c63\\\"},\\\"col-2-7c0b410a-e205-49cc-889d-a9bfe37a3c97\\\":{\\\"label\\\":\\\"@timestamp\\\",\\\"dataType\\\":\\\"date\\\",\\\"operationType\\\":\\\"date_histogram\\\",\\\"sourceField\\\":\\\"@timestamp\\\",\\\"isBucketed\\\":true,\\\"scale\\\":\\\"interval\\\",\\\"params\\\":{\\\"interval\\\":\\\"auto\\\"},\\\"id\\\":\\\"7c0b410a-e205-49cc-889d-a9bfe37a3c97\\\"},\\\"col-3-c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\":{\\\"label\\\":\\\"Count of records\\\",\\\"dataType\\\":\\\"number\\\",\\\"operationType\\\":\\\"count\\\",\\\"isBucketed\\\":false,\\\"scale\\\":\\\"ratio\\\",\\\"sourceField\\\":\\\"Records\\\",\\\"id\\\":\\\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\"}}\"}\n| lens_xy_chart xTitle=\"@timestamp\" yTitle=\"Count of records\" legend={lens_xy_legendConfig isVisible=true position=\"right\"} fittingFunction=\"None\" \n  layers={lens_xy_layer layerId=\"2ac894ce-bcf8-4c73-b6f2-822b42e2710f\" hide=false xAccessor=\"7c0b410a-e205-49cc-889d-a9bfe37a3c97\" yScaleType=\"linear\" xScaleType=\"time\" isHistogram=true splitAccessor=\"f293234a-b397-4c3a-894b-b88cb8de3c63\"  seriesType=\"bar_stacked\" accessors=\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\" columnToLabel=\"{\\\"c5edf03c-e5cd-459b-906c-82e6b0e84edb\\\":\\\"Count of records\\\",\\\"f293234a-b397-4c3a-894b-b88cb8de3c63\\\":\\\"Top values of unbound.dns.question.name\\\"}\"}","state":{"datasourceMetaData":{"filterableIndexPatterns":[{"id":"unbound","title":"pfelk-unbound*"}]},"datasourceStates":{"indexpattern":{"currentIndexPatternId":"unbound","layers":{"2ac894ce-bcf8-4c73-b6f2-822b42e2710f":{"columnOrder":["f293234a-b397-4c3a-894b-b88cb8de3c63","7c0b410a-e205-49cc-889d-a9bfe37a3c97","c5edf03c-e5cd-459b-906c-82e6b0e84edb"],"columns":{"7c0b410a-e205-49cc-889d-a9bfe37a3c97":{"dataType":"date","isBucketed":true,"label":"@timestamp","operationType":"date_histogram","params":{"interval":"auto"},"scale":"interval","sourceField":"@timestamp"},"c5edf03c-e5cd-459b-906c-82e6b0e84edb":{"dataType":"number","isBucketed":false,"label":"Count of records","operationType":"count","scale":"ratio","sourceField":"Records"},"f293234a-b397-4c3a-894b-b88cb8de3c63":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.question.name","operationType":"terms","params":{"orderBy":{"columnId":"c5edf03c-e5cd-459b-906c-82e6b0e84edb","type":"column"},"orderDirection":"desc","size":10},"scale":"ordinal","sourceField":"unbound.dns.question.name"}},"indexPatternId":"unbound"},"c6e506b9-936f-44c7-9bfa-1ee098ae4a95":{"columnOrder":["968110f0-a104-47d1-8410-70fce511fc78","6f97d613-d7fd-4198-92ae-8971071b3404","24b4d903-1d02-458a-a5e9-bffb17378162"],"columns":{"24b4d903-1d02-458a-a5e9-bffb17378162":{"dataType":"number","isBucketed":false,"label":"Count of records","operationType":"count","scale":"ratio","sourceField":"Records"},"6f97d613-d7fd-4198-92ae-8971071b3404":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.answers.type","operationType":"terms","params":{"orderBy":{"columnId":"24b4d903-1d02-458a-a5e9-bffb17378162","type":"column"},"orderDirection":"desc","size":3},"scale":"ordinal","sourceField":"unbound.dns.answers.type"},"968110f0-a104-47d1-8410-70fce511fc78":{"dataType":"string","isBucketed":true,"label":"Top values of unbound.dns.question.class","operationType":"terms","params":{"orderBy":{"columnId":"24b4d903-1d02-458a-a5e9-bffb17378162","type":"column"},"orderDirection":"desc","size":10},"scale":"ordinal","sourceField":"unbound.dns.question.class"}},"indexPatternId":"unbound"}}}},"filters":[],"query":{"language":"kuery","query":""},"visualization":{"fittingFunction":"None","layers":[{"accessors":["c5edf03c-e5cd-459b-906c-82e6b0e84edb"],"layerId":"2ac894ce-bcf8-4c73-b6f2-822b42e2710f","seriesType":"bar_stacked","splitAccessor":"f293234a-b397-4c3a-894b-b88cb8de3c63","xAccessor":"7c0b410a-e205-49cc-889d-a9bfe37a3c97"}],"legend":{"isVisible":true,"position":"right"},"preferredSeriesType":"bar_stacked","shape":"donut"}},"title":"Unbound - Queries/Time","visualizationType":"lnsXY"},"id":"b0bc9600-10e0-11eb-8725-ed0ed9b0ff36","migrationVersion":{"lens":"7.8.0"},"references":[],"type":"lens","updated_at":"2020-10-18T01:27:37.272Z","version":"WzYzOTAsM10="}
{"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"version\":\"7.9.2\",\"gridData\":{\"x\":0,\"y\":0,\"w\":19,\"h\":14,\"i\":\"2e3b9a03-c324-4a3e-83ab-85e946155207\"},\"panelIndex\":\"2e3b9a03-c324-4a3e-83ab-85e946155207\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":19,\"y\":0,\"w\":11,\"h\":7,\"i\":\"0b361671-2bec-4f42-ba5e-a20fc047c88b\"},\"panelIndex\":\"0b361671-2bec-4f42-ba5e-a20fc047c88b\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":30,\"y\":0,\"w\":18,\"h\":14,\"i\":\"d452b335-d04e-49ae-8bcb-f75422375dd5\"},\"panelIndex\":\"d452b335-d04e-49ae-8bcb-f75422375dd5\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":0,\"y\":14,\"w\":28,\"h\":22,\"i\":\"78f774e2-c593-4d22-886f-748445bfd020\"},\"panelIndex\":\"78f774e2-c593-4d22-886f-748445bfd020\",\"embeddableConfig\":{},\"panelRefName\":\"panel_3\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":28,\"y\":14,\"w\":20,\"h\":22,\"i\":\"c62e8def-8247-4b9a-ac45-c694b9abf34c\"},\"panelIndex\":\"c62e8def-8247-4b9a-ac45-c694b9abf34c\",\"embeddableConfig\":{},\"panelRefName\":\"panel_4\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":0,\"y\":36,\"w\":36,\"h\":16,\"i\":\"289ea23a-2296-400d-bc9b-1b721ac6c888\"},\"panelIndex\":\"289ea23a-2296-400d-bc9b-1b721ac6c888\",\"embeddableConfig\":{},\"panelRefName\":\"panel_5\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":36,\"y\":36,\"w\":12,\"h\":16,\"i\":\"38487494-be5f-4457-b389-109b608826c5\"},\"panelIndex\":\"38487494-be5f-4457-b389-109b608826c5\",\"embeddableConfig\":{},\"panelRefName\":\"panel_6\"},{\"version\":\"7.9.2\",\"gridData\":{\"x\":0,\"y\":52,\"w\":48,\"h\":20,\"i\":\"11e80fa2-cd1b-4740-8434-77527a25516c\"},\"panelIndex\":\"11e80fa2-cd1b-4740-8434-77527a25516c\",\"embeddableConfig\":{},\"panelRefName\":\"panel_7\"}]","timeRestore":false,"title":"Unbound - Dashboard","version":1},"id":"08c0abb0-10e2-11eb-8725-ed0ed9b0ff36","migrationVersion":{"dashboard":"7.3.0"},"references":[{"id":"3d0ae6b0-10e2-11eb-8725-ed0ed9b0ff36","name":"panel_0","type":"visualization"},{"id":"bc12bcd0-10e2-11eb-8725-ed0ed9b0ff36","name":"panel_1","type":"visualization"},{"id":"58560da0-10e2-11eb-8725-ed0ed9b0ff36","name":"panel_2","type":"visualization"},{"id":"8a0e5a80-10df-11eb-8725-ed0ed9b0ff36","name":"panel_3","type":"visualization"},{"id":"6a435b50-10e0-11eb-8725-ed0ed9b0ff36","name":"panel_4","type":"lens"},{"id":"8109a0f0-10e1-11eb-8725-ed0ed9b0ff36","name":"panel_5","type":"search"},{"id":"4b2034e0-10e1-11eb-8725-ed0ed9b0ff36","name":"panel_6","type":"lens"},{"id":"b0bc9600-10e0-11eb-8725-ed0ed9b0ff36","name":"panel_7","type":"lens"}],"type":"dashboard","updated_at":"2020-10-18T01:42:17.256Z","version":"WzY1NDIsM10="}
{"exportedCount":9,"missingRefCount":0,"missingReferences":[]}
